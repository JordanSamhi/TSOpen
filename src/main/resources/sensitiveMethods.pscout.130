<javax.persistence.EntityManager: javax.persistence.TypedQuery createQuery(java.lang.String,java.lang.Class)>
<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)>
<org.springframework.mock.web.portlet.MockPortletRequest: void setParameters(java.util.Map)>
<org.apache.axis2.description.AxisService: void printWSDLError(java.io.OutputStream)>
<org.springframework.mock.web.portlet.MockPortletRequest: void setParameter(java.lang.String,java.lang.String)>
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void setResponseHeader(org.apache.xmlrpc.common.ServerStreamConnection,java.lang.String,java.lang.String)>
<net.sourceforge.pebble.domain.Comment: void setAuthenticated(boolean)>
<org.springframework.web.socket.server.support.WebSocketHttpRequestHandler: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.apache.xmlrpc.server.ReflectiveXmlRpcHandler: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)>
<com.mysql.jdbc.Statement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.springframework.test.context.transaction.TransactionalTestExecutionListener: void runAfterTransactionMethods(org.springframework.test.context.TestContext)>
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl)>
<org.apache.xmlrpc.webserver.XmlRpcServlet: void log(java.lang.String)>
<org.apache.stratos.cli.StratosApplication: int run(java.lang.String[])>
<org.owasp.webgoat.session.ParameterParser: void update(javax.servlet.ServletRequest)>
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void execute(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.apache.xmlrpc.webserver.ServletOutputStreamImpl: void write(byte[],int,int)>
<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)>
<org.apache.xmlrpc.webserver.Connection: void writeResponseHeader(org.apache.xmlrpc.webserver.RequestData,int)>
<org.apache.bcel.util.JavaWrapper: void runMain(java.lang.String,java.lang.String[])>
<org.springframework.format.datetime.joda.PeriodFormatter: java.lang.Object parse(java.lang.String,java.util.Locale)>
<org.apache.xerces.impl.xs.models.XSDFACM: void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)>
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)>
<org.owasp.webgoat.session.DatabaseUtilities: java.sql.Connection getHsqldbConnection(java.lang.String,org.owasp.webgoat.session.WebgoatContext)>
<org.springframework.jdbc.core.JdbcTemplate: void execute(java.lang.String)>
<org.springframework.mock.web.MockBodyContent: void println(java.lang.String)>
<org.owasp.webgoat.HammerHead: void log(javax.servlet.http.HttpServletRequest,java.lang.String)>
<org.apache.xmlrpc.server.XmlRpcServerWorker: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)>
<org.owasp.webgoat.session.LessonSession: void setAuthenticated(boolean)>
<org.springframework.orm.hibernate3.support.ClobStringType: int[] sqlTypes)>
<org.owasp.webgoat.session.WebSession: void update(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<org.apache.xmlrpc.webserver.WebServer: void setParanoid(boolean)>
<com.novell.ldap.rfc2251.RfcFilter: void addSubstring(int,byte[])>
<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void handleMessage(org.springframework.web.socket.TextMessage,org.springframework.web.socket.WebSocketSession)>
<org.xmldb.api.base.XMLDBException: void printStackTrace(java.io.PrintWriter)>
<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendTextMessage(org.springframework.web.socket.TextMessage)>
<org.apache.xerces.impl.xpath.regex.REUtil: void dumpString(java.lang.String)>
<org.apache.http.impl.conn.DefaultClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>
<org.owasp.esapi.reference.validation.StringValidationRule: void addBlacklistPattern(java.util.regex.Pattern)>
<org.springframework.security.util.FieldUtils: void setProtectedFieldValue(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.mock.web.MockBodyContent: void println(char[])>
<org.springframework.test.context.junit4.SpringJUnit4ClassRunner: void runChild(org.junit.runners.model.FrameworkMethod,org.junit.runner.notification.RunNotifier)>
<org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator: void sendMessage(org.springframework.web.socket.WebSocketMessage)>
<org.springframework.orm.hibernate3.TypeDefinitionBean: void setParameters(java.util.Properties)>
<org.springframework.format.datetime.joda.DateTimeParser: org.joda.time.DateTime parse(java.lang.String,java.util.Locale)>
<org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)>
<org.springframework.mock.web.MockJspWriter: void println(java.lang.String)>
<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)>
<com.github.scribejava.core.oauth.OAuth20Service: com.github.scribejava.core.model.OAuth2AccessToken sendAccessTokenRequestSync(com.github.scribejava.core.model.OAuthRequest)>
<com.github.scribejava.core.oauth.OAuth20Service: java.util.concurrent.Future sendAccessTokenRequestAsync(com.github.scribejava.core.model.OAuthRequestAsync,com.github.scribejava.core.model.OAuthAsyncRequestCallback)>
<org.apache.xmlrpc.client.XmlRpcClient: java.lang.Object execute(java.lang.String,java.lang.Object[])>
<java.lang.Runtime: java.lang.Process exec(java.lang.String)>
<org.apache.xpath.jaxp.XPathImpl: javax.xml.xpath.XPathExpression compile(java.lang.String)>
<org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)>
<org.jsoup.nodes.Node: org.jsoup.nodes.Node before(java.lang.String)>
<org.jsoup.nodes.Node: org.jsoup.nodes.Node after(java.lang.String)>
<javax.servlet.http.HttpServletResponseWrapper: void sendRedirect(java.lang.String)>
<java.net.URLConnection: void connect()>
<java.net.URLConnection: java.io.OutputStream getOutputStream()>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[],int,int)>
<java.io.OutputStream: void write(int)>
<java.io.FileOutputStream: void write(byte[])>
<java.io.FileOutputStream: void write(byte[],int,int)>
<java.io.FileOutputStream: void write(int)>
<java.io.Writer: void write(char[])>
<java.io.Writer: void write(char[],int,int)>
<java.io.Writer: void write(int)>
<java.io.Writer: void write(java.lang.String)>
<java.io.Writer: void write(java.lang.String,int,int)>
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>
<android.content.Context: void sendBroadcast(android.content.Intent)>
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.media.MediaRecorder: void setVideoSource(int)>
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>
<android.media.MediaRecorder: void start()>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> 
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> 
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<java.net.Socket: void connect(java.net.SocketAddress)>
<android.os.Handler: boolean sendMessage(android.os.Message)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<android.content.Context: void startActivities(android.content.Intent[])>
<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)>
<android.content.Context: android.content.ComponentName startService(android.content.Intent)>
<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.content.Context: void sendBroadcast(android.content.Intent)>
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.app.Activity: void setResult(int,android.content.Intent)>
<android.app.Activity: void startActivities(android.content.Intent[])>
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)>
<android.app.Activity: void startActivityForResult(android.content.Intent,int)>
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int)>
<android.app.Activity: android.content.ComponentName startService(android.content.Intent)>
<android.app.Activity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.app.Activity: void sendBroadcast(android.content.Intent)>
<android.app.Activity: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.app.Activity: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Activity: void sendStickyBroadcast(android.content.Intent)>
<android.app.Activity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Activity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<java.lang.ProcessBuilder: java.lang.Process start()>
